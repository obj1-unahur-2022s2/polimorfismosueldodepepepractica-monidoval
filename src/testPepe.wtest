import pepe.*
import bonos.*
import categorias.*
import personas.*

describe "sueldo pepe" {
	test "Test inicial 1" {
		
	pepe.categoria(cadete)
	pepe.bonoResultado(bonoMontoFijo)
	pepe.bonoPresentismo(bonoPresentismoNormal)
	pepe.cantidadDeFaltas(3)
		
		assert.equals(20000 + 800 + 0, pepe.sueldo())
	}

	test "pepe gerente, bono resultado %, presentismo nulo, resultado 16500"{
		
	pepe.categoria(gerente)
	pepe.bonoResultado(bonoPorcentaje)
	pepe.bonoPresentismo(bonoNulo)
	
		assert.equals(16500, pepe.sueldo())
	}
	
}
describe "tests adicionales sugeridos"{
	method initialize(){
		pepe.categoria(cadete)
		pepe.bonoResultado (bonoPorcentaje)
		pepe.bonoPresentismo(bonoPresentismoNormal)
	}
	
	test "pepe cadete, bono resultado %, bono presentismo normal, sin faltas"{
				
			assert.equals(24000, pepe.sueldo())
		}
		
	test "igual anterior, con 1 falta"{
		
		pepe.cantidadDeFaltas(1)
		
			assert.equals(23000, pepe.sueldo())
		
		}
}
describe "tests de mas variantes"{
	
	method initialize(){
		medioTiempo.categoriaBase(cadete)
		pepe.categoria(medioTiempo)		
	}
	
	test "sofía vendedor, hay muchas ventas, bono resultado monto fijo"{
		
		sofia.categoria(vendedor)
		vendedor.activarAumentoPorMuchasVentas()
		sofia.bonoResultado(bonoMontoFijo)
		
			assert.equals(26800, sofia.sueldo())		
		}
	
	test "pepe cadete medio tiempo, bono presentismo porcentaje, bono presentismo demagógico, con 1 falta"{
	
		
		pepe.bonoResultado(bonoPorcentaje)
		pepe.bonoPresentismo(bonoPresentismoDemagogico)
		pepe.cantidadDeFaltas(1)
		
			assert.equals(11500, pepe.sueldo())		
		}
	
	test "roque, bono resultado monto fijo"{
		
		roque.bonoResultado(bonoMontoFijo)
		
			assert.equals(37800, roque.sueldo())			
		}
		
	test "ernesto compañero pepe, bono presentismo ajuste, sin faltas"{
		
		ernesto.companiero(pepe)
		ernesto.bonoPresentismo(bonoPresentismoAjuste)
		ernesto.cantidadDeFaltas(0)
		
			assert.equals(10100, ernesto.sueldo())
	}	
}